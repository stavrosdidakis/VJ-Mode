<jittershader name="led_shader">
	<description>
	Make video look like led wall, developed by David Scharf (dave@huesforalice.com) for Karl Kliem (dienststelle.de)
	</description>
	<param name="dotdistance" type="float" default="5.0">
		<description>Distance of the led dots</description>
	</param>
	<param name="offset_red" type="vec2" default="0.0 0.0">
		<description>Distance of the led dots</description>
	</param>	
	<param name="offset_green" type="vec2" default="0.0 0.0">
		<description>Distance of the led dots</description>
	</param>	
	<param name="offset_blue" type="vec2" default="0.0 0.0">
		<description>Distance of the led dots</description>
	</param>		
	<language name="glsl" version="1.0">	
		<bind param="dotdistance" program="fp" />
		<bind param="offset_red" program="fp" />	
		<bind param="offset_green" program="fp" />	
		<bind param="offset_blue" program="fp" />	
		<program name="vp" type="vertex">

<![CDATA[

varying vec2 texcoord0;
varying vec2 texcoord1;
varying vec2 texcoord2;
varying vec2 texcoord3;
varying vec2 texcoord4;
varying vec2 texcoord5;
varying vec2 texcoord6;
varying vec2 texcoord7;

void main()
{
	// perform standard transform on vertex
	gl_Position = ftransform();
    
	// transform texcoords
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
	texcoord2 = vec2(gl_TextureMatrix[2] * gl_MultiTexCoord2);
	texcoord3 = vec2(gl_TextureMatrix[3] * gl_MultiTexCoord3);
	texcoord4 = vec2(gl_TextureMatrix[4] * gl_MultiTexCoord4);
	texcoord5 = vec2(gl_TextureMatrix[5] * gl_MultiTexCoord5);
	texcoord6 = vec2(gl_TextureMatrix[6] * gl_MultiTexCoord6);
	texcoord7 = vec2(gl_TextureMatrix[7] * gl_MultiTexCoord7);
}
]]>
</program>

		<program name="fp" type="fragment">
<![CDATA[

uniform sampler2DRect tex;

varying vec2 texcoord0;

uniform float dotdistance;
float halfdistance = dotdistance / 2.0;
float quaterdistance = dotdistance / 4.0;

uniform vec2 offset_red;
uniform vec2 offset_green;
uniform vec2 offset_blue;



void main()
{	
	vec2 offsetr = offset_red * (dotdistance / 5.0);
	vec2 offsetg = offset_green * (dotdistance / 5.0);
	vec2 offsetb = offset_blue * (dotdistance / 5.0);
	
	float baseXr = floor((texcoord0.x - offsetr.x) / dotdistance) * dotdistance + halfdistance + offsetr.x; 
	float baseYr = floor((texcoord0.y - offsetr.y) / dotdistance) * dotdistance + halfdistance + offsetr.y; 
	
	float distanceXr = abs(texcoord0.x - baseXr);
	float distanceYr = abs(texcoord0.y - baseYr);

	float distancer = sqrt(pow(distanceXr, 2.0) + pow(distanceYr, 2.0));

	float visibilityr = float(distancer< (quaterdistance) ) + float(distancer >= (quaterdistance) ) *  ( (halfdistance - distancer) / quaterdistance);

	float baseXg = floor((texcoord0.x - offsetg.x) / dotdistance) * dotdistance + halfdistance + offsetg.x; 
	float baseYg = floor((texcoord0.y - offsetg.y) / dotdistance) * dotdistance + halfdistance + offsetg.y; 
	
	float distanceXg = abs(texcoord0.x - baseXg);
	float distanceYg = abs(texcoord0.y - baseYg);

	float distanceg = sqrt(pow(distanceXg, 2.0) + pow(distanceYg, 2.0));

	float visibilityg = float(distanceg< (quaterdistance) ) + float(distanceg >= (quaterdistance) ) *  ( (halfdistance - distanceg) / quaterdistance);

	float baseXb = floor((texcoord0.x - offsetb.x) / dotdistance) * dotdistance + halfdistance + offsetb.x; 
	float baseYb = floor((texcoord0.y - offsetb.y) / dotdistance) * dotdistance + halfdistance + offsetb.y; 
	
	float distanceXb = abs(texcoord0.x - baseXb);
	float distanceYb = abs(texcoord0.y - baseYb);

	float distanceb = sqrt(pow(distanceXb, 2.0) + pow(distanceYb, 2.0));

	float visibilityb = float(distanceb< (quaterdistance) ) + float(distanceb >= (quaterdistance) ) *  ( (halfdistance - distanceb) / quaterdistance);

	vec4 stuffr = texture2DRect(tex, vec2(baseXr, baseYr));
	vec4 stuffg = texture2DRect(tex, vec2(baseXg, baseYg));
	vec4 stuffb = texture2DRect(tex, vec2(baseXb, baseYb));

	//gl_FragColor = stuff;
	gl_FragColor = vec4(stuffr.x * visibilityr, stuffg.y * visibilityg, stuffb.z * visibilityb, 1.0);
	
} 


]]>
		</program>
	</language>
</jittershader>
